[{"content":"基本使用  定义变量  a := 3; # 定义变量不是用等号， 而是用冒号等号 b := 4: # 冒号不打印 c := 3 * 4; # 分号打印 f := a x^2 + b x + c; # 两个变量或者数字与变量的乘积可以省略乘号， 两个数字的乘积不能省略 # 这里#表示注释， 其后面的内容不会运行。 # 对所写程序添加注释是一个良好的代码习惯。 说明方法和目的， # 有助于自己和别人理解   变量类型\n  矩阵\nwith(LinearAlgebra): # 使用矩阵及其操作， 需要引入线性代数包 M := Matrix( row, col ); # row * col阶矩阵 M := Matrix( row ) ; # row阶方阵 M[1, ..] # M的第一行(向量型)   列表\narr :=[1, 2, 3, 4]: arr[3] # return 3;   集合\narr := { 1, 2, 3, 4 }:   向量\narr := \u0026lt;1, 2, 3, 4\u0026gt;;   序列\narr := seq(1..3) # return 1, 2, 3 arr := [ seq(1..3) ] # return [1, 2, 3] arr := seq( i^2, i=1..3 ) # return 1, 4, 9     判断\n  if x \u0026gt; 0 and (or) x \u0026lt; 4 then do something; end if;  循环  for i from 1 to 10 do do something; end do; arr := [1, 2, 3, 4]; for i in arr do do something; end do;  函数  func := (x) -\u0026gt; x^2: # 箭头函数 func := proc(x) return x^2; end proc: func(4) # return 16 常用命令  化简/因式分解/展开/  simplify / factor / expand  微分/积分  diff(f, x$k) / int(f, x)  求解方程(组)  solve( eq = 0, x ) / solve({ eq1=b1, eq2=b2, ... }, { x1, x2, ... }) % 右端等于0可以省略  求解微分方程(组)  dsolve( deq = 0, y ) / dsolve({ deq1=b1, deq2=b2, ... }, { y1, y2, ... }) % 右端等于0可以省略  公式拆解/获取自变量  op( f(x) ) # return x op( a + b c ) # return a, b c op( a b ) # return a, b  获取未知函数(量)  indets( a f(x) + b ) # return { a, b, x, f(x) }; indets( a f(x) + b, Function ) # return { f(x) };  变量转换  convert( 1/3, float ) # return 0.3333333... convert( f(x), string ) # return \u0026#34;f(x)\u0026#34; convert( \u0026#34;f(x)\u0026#34;, symbol ) # return f(x) convert( [1, 2, 3, 4], set ) # return {1, 2, 3, 4} evalf( 1/3 ) # return 0.33333...  复数操作  a := 3 + 4 I: b := a^* # return 3 - 4 I; [ Re(a), Im(a) ] # return [3, 4] evalc( expr ) # return Re(expr) + I Im(expr)  映射  arr := [ seq(1..3) ]; map( x-\u0026gt; x^2, arr ); # return [1, 4, 9] map可以替代for循环， 更加方便。  符号连接  cat(v, 1, 2) # return v12; seq(cat(v, i), i=1..3) # return v1, v2, v3 seq(seq(cat(v, i, j), i=1..3), j=1..3 ) # return v11, v12, ..., v33 Transpose(convert([seq(seq(cat(v, i, j), i = 1..3), j = 1..3)], Matrix, 3)) # return (vij)_{3*3} 示例 var url = \"https:\\/\\/jiandandaoxingfu.github.io\\/myblog\\/\" + 'post\\/maple-symbolic-calculation\\/files\\/example.pdf';\rvar div = document.getElementById('container');\rdiv.style = \"margin: 2%;\"\rdiv.innerHTML += ``\r\r \r#download a::hover {\rtransform: scale(0.8);\r}\r\rvar url = \"https:\\/\\/jiandandaoxingfu.github.io\\/myblog\\/\" + 'post\\/maple-symbolic-calculation\\/files\\/example.mw';\rvar text = '下载源代码';\rvar div = document.getElementById('download');\rdiv.innerHTML = `${text}`\r\r ","permalink":"https://jiandandaoxingfu.github.io/myblog/post/maple-symbolic-calculation/","summary":"Maple符号计算的快速入门教程","title":"Maple-符号计算"},{"content":"\r\rdocument.addEventListener(\"DOMContentLoaded\", function() {\rrenderMathInElement(document.body, {\rdelimiters: [\r{left: '$$', right: '$$', display: true},\r{left: '$', right: '$', display: false},\r{left: \"\\\\begin{equation}\", right: \"\\\\end{equation}\", display: true},\r{left: \"\\\\begin{cases}\", right: \"\\\\end{cases}\", display: true},\r{left: \"\\\\begin{pmatrix}\", right: \"\\\\end{pmatrix}\", display: true},\r{left: \"\\\\begin{array}\", right: \"\\\\end{array}\", display: true},\r{left: \"\\\\begin{align}\", right: \"\\\\end{align}\", display: true}\r],\rthrowOnError : false });\r});\r\r 这里我们记录一下使用Maple自动推导离散谱问题的时间部分的$V$的形式。\n我们以$4$阶谱问题为例。 给定空间谱问题$U(n, \\lambda)=(U_{ij})_{4\\times 4}$ (这里我们限定$U$中的同一位势不重复出现)，我们设$V(n, \\lambda)=(V_{ij})_{4\\times 4}$，则静态零曲率方程 \\begin{equation} S=V^+U - UV = 0 \\end{equation} 是包含$16$个未知量的线性方程。\n我们的目的是构造恰当的$V$的形式，使得静态零曲率方程满足下面两个条件：\n  (C1): 如果$ \\dfrac{\\partial U_{ij}}{\\partial n}\\neq 0$，则$S_{ij}$形如$A+\\lambda^k B=0$，其中$A，B$与谱参数$ \\lambda$无关，且$U_{ij}$中位势的系数为$\\lambda$的$0$次或者$k$次幂。\n  (C2): 如果$ \\dfrac{\\partial U_{ij}}{\\partial n}= 0$，则$S_{ij}$形如$\\lambda^k A=0$，其中$A$与谱参数$\\lambda$无关。\n  接下来我们给出Maple实现的思想和步骤。 记$ \\dfrac{\\partial U_{ij}}{\\partial n}= 0$所对应的$S$的子集为$S_0$。 我们分为两个步骤：\n  第一步: 减少未知量的个数。 对于$eq\\in S_0$， 如果某个变量可以用其它变量表示出来，则将$S$中所有该变量替换。 此时，方程数和未知量个数都减少一个。 重复该操作，直到不存在某个变量可以用其它变量表示。 此时$S_0$剩余的式子仍记为$S_0$。\n  第二步: 平衡$\\lambda$。 对于$eq\\in S_0$， 如果$\\lambda$的最大最小次幂不等， 则为了满足(C2)，我们将最低次幂的系数中的未知量替换为$\\lambda^k$乘以这些未知量， 使得该式达到平衡。 因此我们需要找到这些未知量，然后对$S$整体进行替换。 重复上述操作。\n  对于不能满足(C2)或者满足(C2)但不满足(C1)的问题，我们无法给出$V$的形式。\n下面我们对程序中的函数做一些说明。\n  size: 返回向量，集合或者列表的元素个数。\n  format-szce: 消去(C2)中的$\\lambda^k$。\n  cancel-var: 返回某个未知量用其它未知量表示的表达式。\n  reduce-szce: 将上面的结果代入$S$，减少方程个数。\n  find-V: 返回需要乘以$\\lambda^k$的未知量。\n  balance-lambda: 将上面结果代入$S$， 平衡$\\lambda$。\n  check: 检查$S$是否满足(C1)和(C2)。\n  基于此， 我们也可以随机生成$U$，看是否可以找到满足(C1)和(C2)的$V$。 我们也用程序实现了这一想法， 这里我们不再描述。 这一方法很容易推广到连续谱问题，这里也不在给出。\n我们将程序放在Github代码库， 这里不在附上。\n","permalink":"https://jiandandaoxingfu.github.io/myblog/post/derive-hierarchy/","summary":"对于给定的谱问题U， 利用Maple自动导出方程族相应的V","title":"Maple自动推导方程族"},{"content":"\r\rdocument.addEventListener(\"DOMContentLoaded\", function() {\rrenderMathInElement(document.body, {\rdelimiters: [\r{left: '$$', right: '$$', display: true},\r{left: '$', right: '$', display: false},\r{left: \"\\\\begin{equation}\", right: \"\\\\end{equation}\", display: true},\r{left: \"\\\\begin{cases}\", right: \"\\\\end{cases}\", display: true},\r{left: \"\\\\begin{pmatrix}\", right: \"\\\\end{pmatrix}\", display: true},\r{left: \"\\\\begin{array}\", right: \"\\\\end{array}\", display: true},\r{left: \"\\\\begin{align}\", right: \"\\\\end{align}\", display: true}\r],\rthrowOnError : false });\r});\r\r 这里我们记录一下使用Maple计算可求解差分方程(存在显式解的差分方程)的程序实现。\n首先，我们要求解的是关于$A$的形如下面的差分方程 \\begin{equation} \\begin{array}{l} A_m + F(\\cdots, A_{-1}, A,\\cdots, A_{m-1}) = G_{p}, \\end{array} \\end{equation} 其中$A_m = A(n+m)$，$F$是关于$A_{m-k}, k\\geq1$的有理函数(一般为变系数多项式)。 等式中与$A$无关的项全部归于$G_{p}$。 在给出程序之前， 我们首先考虑如何求解此类问题。 考虑一个简单的方程 \\begin{equation} \\begin{array}{l} A^+ + A = u^{++} - u. \\end{array} \\end{equation} 其解自然是$A=u^+ - u$(这里我们不考虑“积分常数”)。 我们思考一下我们是如何“自然”给出解的。 观察等式两端，显然$u^{++}$必然出自于$A^+$， 因此我们不妨做变换$A^{+}=A'^{+} + u^{++}$，代入方程得 \\begin{equation} \\begin{array}{l} A'^+ + A' = -u^+ - u. \\end{array} \\end{equation} 同理，我们做变换$A'^{+}=A''^{+} - u^{+}$，则 \\begin{equation} \\begin{array}{l} A''^+ + A'' = 0. \\end{array} \\end{equation} 由于我们不考虑“积分常数”，此时$A''$自然为$0$。 从而 \\begin{equation} \\begin{array}{l} A = A' + u^{+} = A'' + u^+ - u = u^+ - u. \\end{array} \\end{equation} 我们发现以上的求解步骤中，遵循一个原则，即等式右端位移算子指数最大项$g_p$，来自于$A_m$。 然后我们做变换$A_m = A_m' + g_p $，得到新的方程 \\begin{equation} \\begin{array}{l} A_m' + F(\\cdots, A'_{-1}, A',\\cdots, A'_{m-1}) = G_{p-1}', \\end{array} \\end{equation} 重复上述步骤，即可得到 \\begin{equation} \\begin{array}{l} A_m^{'\\cdots'} + F(\\cdots, A_{-1}^{'\\cdots'} A,\\cdots, A_{m-1}^{'\\cdots'} )= 0, \\end{array} \\end{equation} 从而取$A_m^{'\\cdots'}=0$， 得$A_m = A_m' + g_p = A_m'' + g_p + g_{p-1}' = \\cdots$。 如果不能经过有限次得到上式， 那么我们认为该方程没有显式解。\n下面我们考虑用Maple实现上述的算法。 上述的讨论也即我们的算法思想， 其中的关键在于获取$G_p$中位移算子指数最大项$g_p$。 幸运的是， 我们可以通过Maple内置的op函数计算$g_p$。 这里我们简单说明如果利用op函数计算$g_p$。 对于一个由有理分式组成的“多项式”形如 \\begin{equation} \\begin{array}{l} expr = {\\dfrac {u ^{++} u ^{+++} u ^{++++} }{v ^{++} v ^{+++++} v ^{++++} }}-{\\dfrac {u ^{++} }{v ^{++} v ^{+++++} }}+{\\dfrac { \\left( u ^{++} \\right) ^{2}u ^{+++} }{ \\left( v ^{++} \\right) ^{2} v ^{++++} }} \\end{array} \\end{equation} 经op作用 op(expr) 可将上述“多项式”分解为多个单项式， 即按加法(减法可变为加法)拆分 \\begin{equation} \\begin{array}{l} {\\dfrac {u ^{++} u ^{+++} u ^{++++} }{v ^{++} v ^{+++++} v ^{++++} }}, \\ \\ \\ -{\\dfrac {u ^{++} }{v ^{++} v ^{+++++} }}, \\ \\ \\ +{\\dfrac { \\left( u ^{++} \\right) ^{2}u ^{+++} }{ \\left( v ^{++} \\right) ^{2} v ^{++++} }} \\end{array} \\end{equation} 而对于一个有理分式单项式， 即形如 \\begin{equation} \\begin{array}{l} expr = {\\dfrac {u ^{++} u ^{+++} u ^{++++} }{v ^{++} v ^{+++++} v ^{++++} }} \\end{array} \\end{equation} 经op作用可将其按乘法(除法可变为乘法)拆分，变为单个函数(对于倒数，需要再经op作用一次) \\begin{equation} \\begin{array}{l} u ^{++},\\ \\ u ^{+++},\\ \\ u ^{++++} ,\\ \\ \\left( v ^{++} \\right) ^{-1},\\ \\ \\left( v ^{+++} \\right) ^{-2},\\ \\ \\left( v ^{+++++} \\right) ^{-1},\\ \\ \\left( v ^{++++} \\right) ^{-1} \\end{array} \\end{equation} 最后， 对于单个函数， 经op作用可提取函数的自变量。 如对$u(n+2)$， 经op作用， 得$n+2$。 特别地， op作用于数字不变。 利用此特点， 我们取定$n$为一个足够大的数(这里是因为出现倒数时， 我们要多一次op作用， 因此我们对所有的项都做最大次(5次)的op叠加， 这样对于没有出现倒数的项， 如果不取定$n$， 则自变量会被进一步分解， 如$n+2$分解为$n, 2$，这样就无法判断大小)， 然后经5次op作用， 我们就可以获取多项式中位移算子的最大指数项。\n上述算法对于变系数差分方程，存在一定的问题，如对于 \\begin{equation} \\begin{array}{l} A^+ - \\dfrac{v^+}{v^{++}}A^{\u0026ndash;} = u^+ - \\dfrac{v^+}{v^{++}}u^{\u0026ndash;}. \\end{array} \\end{equation} 显然，它的解为$A^{+}=u^{+}$， 然而，位移算子的最大指数项是$\\dfrac{v^+u^{\u0026ndash;}}{v^{++}}$， 这导致算法无法求解。 原因在于变系数对算法造成了干扰， 目前我们还没有找到行之有效的方法避免这种情况。 实际求解中，我们可以将上述算法改为取位移算子的最小指数项， 那么该问题就解决了。 但是对于其它问题未必。 当然，对于一些问题，可以交叉使用两者。 另外一种办法是做变换$w=v^{\u0026mdash;\u0026mdash;}$，则其不再影响，求解以后再做逆变换即可。\n我们将程序放在Github代码库， 这里不在附上。\n","permalink":"https://jiandandaoxingfu.github.io/myblog/post/solve-difference-equation/","summary":"利用Maple求解差分方程的算法","title":"Maple求解差分方程"},{"content":"var url = \"https:\\/\\/jiandandaoxingfu.github.io\\/myblog\\/\" + 'post\\/sci-writting\\/files\\/sci-writting.pdf';\rvar div = document.getElementById('container');\rdiv.style = \"margin: 2%;\"\rdiv.innerHTML += ``\r\r ","permalink":"https://jiandandaoxingfu.github.io/myblog/post/sci-writting/","summary":"科研论文写作中一些常用的网站","title":"科研论文写作"},{"content":"安装 首先下载Hugo程序，我们将其放在目录D:/Hugo/bin/hugo.exe。 然后将该路径添加到环境变量Path中...;D:/Hugo/bin/。 在命令行输入hugo version并回车，可以查看hugo的版本信息，则环境配置成功。\n然后我们就可以使用命令行工具创建网站项目。 创建网站项目名为mysite，放在E盘\nE:\\\u0026gt; hugo new site mysite 回车即初始化项目，可以得到E:/mysite/文件夹，包含以下文件(夹)\narchetypes/ content/ data/ layouts/ static/ themes/ config.toml 这样我们就创建了一个空的项目。\n主题 Hugo有很多适配的主题，免去了我们重新设计的麻烦。 这里我们使用主题PaperMod来说明如何使用。\n首先将该仓库下载解压至E:/mysite/themes/papermod文件夹下， 它包含以下文件(夹)\n.git/ .github/ assets/ i18n/ layouts/ ... 前两个github库相关文件夹可以删除。 然后我们就可以创建页面。 命令行输入(当然也可以用记事本等软件新建md文件)\nE:\\mysite\u0026gt; hugo new post/first/index.md 回车即成功创建文件E:/mysite/content/post/first/index.md。 命令行启动server\nE:\\mysite\u0026gt; hugo server -t papermod --buildDrafts 回车即返回编译成功，并生成地址：localhost:1313。 用浏览器打开该地址， 即可得到我们的主页面 可以看到我们创建的第一个文件first。\n我们可以对主页面进行如下配置。 将文件E:/mysite/config.toml重命名为config.yml，内容修改为\npublishDir: docs baseURL: \u0026#34;https://jiandandaoxingfu.github.io/hugo-papermod\u0026#34; title: hugo-papermod paginate: 5 theme: PaperMod enableRobotsTXT: true buildDrafts: true buildFuture: false buildExpired: false minify: disableXML: true minifyOutput: true params: env: production title: hugo-papermod description: hugo-papermod keywords: [Hugo, PaperMod] author: JMx DateFormat: \u0026#34;January 2, 2006\u0026#34; defaultTheme: auto # dark, light disableThemeToggle: false ShowReadingTime: true ShowShareButtons: false ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: false disableSpecial1stPost: false disableScrollToTop: false comments: true hidemeta: false hideSummary: false showtoc: true tocopen: false assets: favicon: https://jiandandaoxingfu.github.io/hugo-papermod/favicon.ico favicon16x16: https://jiandandaoxingfu.github.io/hugo-papermod/favicon.ico favicon32x32: https://jiandandaoxingfu.github.io/hugo-papermod/favicon.ico apple_touch_icon: https://jiandandaoxingfu.github.io/hugo-papermod/favicon.ico safari_pinned_tab: https://jiandandaoxingfu.github.io/hugo-papermod/favicon.ico label: text: \u0026#34;Home\u0026#34; icon: https://jiandandaoxingfu.github.io/hugo-papermod/favicon.ico iconHeight: 35 cover: hidden: false # hide everywhere but not in structured data hiddenInList: false # hide on list pages and home hiddenInSingle: false # hide on single page fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.6 minMatchCharLength: 3 keys: [\u0026#34;title\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;, \u0026#34;permalink\u0026#34;] menu: main: - identifier: archives name: Archives url: /archives/ weight: 10 - identifier: categories name: Categories url: /categories/ weight: 20 - identifier: tags name: Tags url: /tags/ weight: 30 - identifier: search name: Search url: /search/ weight: 40 - identifier: about name: About url: /about/ weight: 50 outputs: home: - HTML - RSS - JSON 有如下几点需要注意:\n  publishDir: docs, 这里是指将项目生成的静态文件放在E:/mysite/docs/文件夹下， 便于我们后面将项目发布到github pages。\n  baseURL: https://username.github.io/hugo-papermod/是我们github pages的主目录。 即我们将整个仓库放在hugo-papermod仓库中。\n  icon地址需要是绝对地址， 发布以后切换页面时才可以正常显示图标。 其中assets是网站图标， label是主页面标题的图标。\n  为了让主页面的几个按钮正常工作， 我们需要创建几个文件\n E:/mysite/content/about.md  --- title: \u0026#34;Who Am I?\u0026#34; # url: \u0026#34;/about\u0026#34; # description: \u0026#34;Description for about\u0026#34; summary: \u0026#34;about\u0026#34; searchHidden: true showToc: false hidemeta: true ShowBreadCrumbs: false ShowReadingTime: false ShowPostNavLinks: false --- --- \u0026lt;!-- content --\u0026gt;  E:/mysite/content/archives.md  --- title: \u0026#34;Archives\u0026#34; layout: \u0026#34;archives\u0026#34; summary: \u0026#34;archives\u0026#34; ---  E:/mysite/content/search.md  --- title: \u0026#34;Search\u0026#34; layout: \u0026#34;search\u0026#34; summary: \u0026#34;search\u0026#34; --- 这样就基本完成了主页面。\n对于子页面， 放在E:/mysite/content/post/文件夹下就可以了。 例如我们更改E:/mysite/content/post/first/index.md为\n--- title: \u0026#34;first\u0026#34; date: 2022-01-06 18:13:52.872 +0800 summary: \u0026#39;How to use hugo with the theme \u0026#34;paperMod\u0026#34;\u0026#39; weight: 1 tags: [\u0026#34;first\u0026#34;, \u0026#34;two\u0026#34;] categories: [\u0026#34;first\u0026#34;] author: \u0026#34;JMx\u0026#34; showToc: true TocOpen: false draft: true hidemeta: false comments: false disableHLJS: true disableShare: true hideSummary: false searchHidden: false ShowReadingTime: true ShowBreadCrumbs: true ShowPostNavLinks: true --- ## content 则此页面显示为 至此我们完成了基本功能。 需要注意的是，我们将此页面引用的图片放在E:/mysite/content/post/first/images/文件夹下。\n配置数学环境 下面， 我们使其支持数学环境。 创建模板文件E:/mysite/themes/papermod/layouts/shortcodes/katex.html， 这里我们使用katex：\n\u0026lt;div id=\u0026#34;katex-support\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-R4558gYOUz8mP9YWpZJjofhk+zx0AS11p36HnD2ZKj/6JR5z27gSSULCNHIRReVs\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-z1fJDqw8ZApjGO3/unPWUPsIymfsJmyrDVWC8Tv/a1HeOtGmkwNd/7xUS0Xcnvsx\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { renderMathInElement(document.body, { delimiters: [ {left: \u0026#39;$$\u0026#39;, right: \u0026#39;$$\u0026#39;, display: true}, {left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false}, {left: \u0026#34;\\\\begin{equation}\u0026#34;, right: \u0026#34;\\\\end{equation}\u0026#34;, display: true}, {left: \u0026#34;\\\\begin{cases}\u0026#34;, right: \u0026#34;\\\\end{cases}\u0026#34;, display: true}, {left: \u0026#34;\\\\begin{pmatrix}\u0026#34;, right: \u0026#34;\\\\end{pmatrix}\u0026#34;, display: true}, {left: \u0026#34;\\\\begin{array}\u0026#34;, right: \u0026#34;\\\\end{array}\u0026#34;, display: true}, {left: \u0026#34;\\\\begin{align}\u0026#34;, right: \u0026#34;\\\\end{align}\u0026#34;, display: true} ], throwOnError : false }); }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 然后只需要在用到数学公式的文章开头引入该模板。 为了查看效果， 我们在E:/mysite/content/post/first/index.md文件中追加如下代码\n... --- {%{\u0026lt; katex \u0026gt;}} % 删除\u0026#34;%\u0026#34;. ## content 这是一个行内公式： $a^2+b^2=1$. 下面的是块级公式 $$ x^2+y^2=1 $$ 支持一下数学环境 \\begin{pmatrix} a \u0026amp; b \\\\\\\\ c \u0026amp; d \\end{pmatrix} \\begin{equation} \\begin{array}{l} \u0026amp; x^2 = 1, \\\\\\\\ \u0026amp; y^2 = 2, \\\\\\\\ \u0026amp; z^2 = 3. \\end{array} \\end{equation} \\begin{equation} x^2 + y^2 = 1. \\end{equation} $$ x = \\begin{cases} a \u0026amp;\\text{if } b \\\\\\\\ c \u0026amp;\\text{if } d \\end{cases} $$ 则有 需要注意的是， 下划线作为markdown特殊词义， 我们需要将公式中的下划线转义，即使用\\_。\n支持PDF文件阅读 类似于数学环境， 我们可以引入pdf.js来支持pdf文件阅读。 首先下载pdfjs， 解压后将其放在E:/msite/static/js/pdf-js/文件夹下。 删除不必要文件后，结构如下\npdf-js/web/viewer.html pdf-js/web/viewer.js pdf-js/web/viewer.css pdf-js/web/images/ pdf-js/build/pdf.js pdf-js/build/pdf.worker.js 然后修改viewer.js文件。 首行添加命令\nconst _url_ = window.location.href.split(\u0026#34;?\u0026#34;)[1]; 然后将文件中默认打开的文件compressed.tracemonkey-pldi-09.pdf改为_url_。 接着创建文件E:/mysite/themes/papermod/layouts/shortcodes/embed-pdf.html\n\u0026lt;div id=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var url = \u0026#34;{{.Site.BaseURL}}\u0026#34; + \u0026#39;{{ .Get \u0026#34;url\u0026#34; }}\u0026#39;; var div = document.getElementById(\u0026#39;container\u0026#39;); div.innerHTML += `\u0026lt;iframe src=/hugo-papermod/js/pdf-js/web/viewer.html?${url}frameborder=\u0026#34;0\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;900px\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;` \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 同样地，我们在需要引入pdf文件的文章中添加\n{%{\u0026lt; embed-pdf url=\u0026quot;post/first/files/test.pdf\u0026quot; \u0026gt;}} % 删除\u0026quot;%\u0026quot; 结果如下 部署到Github Pages 下面， 我们将上述项目放在github中， 并启用github pages。 首先用hugo生成静态页面\nE:\\mysite\u0026gt; hugo 回车后hugo会将文章生成html页面， 放在docs文件夹下。 然后我们创建仓库hugo-papermod(前面我们已经假设此仓库建好了，并且有icon图片)。 然后打开github pages， 选择main-\u0026gt;docs保存发布即可访问。\n总结 上面我们只是简单说该主题如何使用， 并没有过多介绍config.xml文件， 对其不同设置， 可以得到不同的主页面， 参见\n  https://gohugo.io/\n  https://adityatelange.github.io/hugo-PaperMod/\n  https://chrispanag.com/\n  https://github.com/anvithks/hugo-embed-pdf-shortcode\n  ","permalink":"https://jiandandaoxingfu.github.io/myblog/post/hugo-papermod/","summary":"How to use hugo with the theme \u0026ldquo;paperMod\u0026rdquo;","title":"Hugo使用教程"}]